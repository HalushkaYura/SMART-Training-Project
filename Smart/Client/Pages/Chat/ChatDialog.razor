@page "/chatdialog/{ProjectId:int}"
@using Smart.Shared.DTOs.ChatDTO
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="chat-container">
    <div class="chat-header">
        <h3>Project Chat</h3>
    </div>
    <div class="message-list">
        @foreach (var message in Messages)
        {
            <div class="message">
                <div class="message-header">
                    <span class="username">@message.UserFullName</span>
                    <span class="message-date">@message.SentDate.ToString("g")</span>
                </div>
                <div class="message-content">
                    <p>@message.Content</p>
                </div>
            </div>
        }
    </div>
    <div class="input-container">
        <input type="text" @bind-value="NewMessage" @onkeyup="HandleKeyUp" placeholder="Type your message..." />
        <button class="send-button" @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    private HubConnection hubConnection;
    private List<ChatMessageDTO> Messages = new List<ChatMessageDTO>();
    private string NewMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .WithAutomaticReconnect() // Додає автоматичне перепідключення
            .Build();

        hubConnection.On<ChatMessageDTO>("ReceiveMessage", (chatMessageDTO) =>
        {
            Messages.Add(chatMessageDTO);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        Messages = (await GetChatMessages()).ToList();
    }

    private async Task<IEnumerable<ChatMessageDTO>> GetChatMessages()
    {
        return await Http.GetFromJsonAsync<IEnumerable<ChatMessageDTO>>($"api/chat/{ProjectId}");
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            var sendMessageDto = new SendMessageDto
                {
                    UserId = GetUserId(),
                    ProjectId = ProjectId,
                    Message = NewMessage
                };

            var response = await Http.PostAsJsonAsync("api/chat", sendMessageDto);
            if (response.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
                NewMessage = string.Empty;
            }
            else
            {
                // Handle error
                Console.WriteLine("Error sending message");
            }
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage().GetAwaiter().GetResult();
        }
    }

    private string GetUserId()
    {
        // Отримати ідентифікатор поточного користувача
        return "userId";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
