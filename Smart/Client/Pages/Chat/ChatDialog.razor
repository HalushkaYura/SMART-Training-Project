@page "/chatdialog/{ProjectId:int}"
@using Smart.Shared.DTOs.ChatDTO
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat</PageTitle>

<RadzenCard>
    <RadzenHeading Size="H3">Chat</RadzenHeading>
    <div class="chat-messages">
        @if (messages != null && messages.Any())
        {
            @foreach (var message in messages)
            {
                <div class="message @(message.UserId == userId ? "my-message" : "their-message")">
                    <strong>@message.UserId:</strong> @message.Content
                </div>
            }
        }
        else
        {
            <div>No messages available.</div>
        }
    </div>
    <div class="chat-input">
        <RadzenTextBox @bind-Value="chatMessageDTO.Content" Style="width: 100%;" Placeholder="Type a message..." />
        <RadzenButton Click="@(async () => await SendMessage())" Icon="send" Style="margin-left: 10px;" />
    </div>
</RadzenCard>

@code {
    [Parameter] public int ProjectId { get; set; }

    private HubConnection hubConnection;
    private List<ChatMessageDTO> messages = new List<ChatMessageDTO>();
    private ChatMessageDTO chatMessageDTO = new ChatMessageDTO();
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.Identity.Name;

        chatMessageDTO.UserId = userId;
        chatMessageDTO.ChatId = ProjectId;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessageDTO>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            StateHasChanged();
        });

        await LoadMessages();

        await hubConnection.StartAsync();
    }

    private async Task LoadMessages()
    {
        messages = await HttpClient.GetFromJsonAsync<List<ChatMessageDTO>>($"/api/chat/{ProjectId}/messages");
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(chatMessageDTO.Content))
        {
            var response = await HttpClient.PostAsJsonAsync("/api/chat/message", new ChatMessageCreateDTO
                {
                    ChatId = chatMessageDTO.ChatId,
                    UserId = chatMessageDTO.UserId,
                    Content = chatMessageDTO.Content
                });

            if (response.IsSuccessStatusCode)
            {
                var newMessage = await response.Content.ReadFromJsonAsync<ChatMessageDTO>();
                await hubConnection.SendAsync("SendMessage", newMessage);
                chatMessageDTO.Content = string.Empty;
            }
            else
            {
                Console.Error.WriteLine("Failed to send message: " + response.StatusCode);
            }
        }
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
