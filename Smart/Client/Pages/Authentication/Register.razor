@page "/register"
@using Radzen
@using Smart.Shared.DTOs.UserDTO
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<EditForm Model="@userRegistration" OnValidSubmit="@HandleRegistration">
    <div class="row">
        <div class="col-md-6 offset-md-3 col-lg-4 offset-lg-4">
            <section>
                <h2 class="text-center">Register a new account.</h2>
                <hr />
                <div class="form-group">
                    <label>First Name</label>
                    <RadzenTextBox @bind-Value="userRegistration.Firstname" Placeholder="First Name" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Last Name</label>
                    <RadzenTextBox @bind-Value="userRegistration.Lastname" Placeholder="Last Name" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <RadzenTextBox @bind-Value="userRegistration.Email" Placeholder="name@example.com" class="form-control" />
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <RadzenPassword @bind-Value="userRegistration.Password" Placeholder="Password" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Birth Date</label>
                    <RadzenDatePicker @bind-Value="userRegistration.BirthDay" Placeholder="Birth Date" class="form-control" />
                </div>
                <div class="text-center">
                    <RadzenButton Text="Register" ButtonType="ButtonType.Submit" Icon="person_add" class="btn btn-primary btn-block m-2" />
                </div>
                <div class="text-center mt-3">
                    <RadzenLink Text="Already have an account? Log in" Path="/login" />
                </div>
            </section>
        </div>
    </div>
</EditForm>

@code {
    private UserRegistrationDTO userRegistration = new UserRegistrationDTO();

    private async Task HandleRegistration()
    {
        var response = await HttpClient.PostAsJsonAsync("api/authentication/registration", userRegistration);
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registration Successful", Detail = "Your account has been created." });
            await Task.Delay(3000); 
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Registration Failed", Detail = error });
        }
    }
}