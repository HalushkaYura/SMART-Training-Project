@page "/login"
@using Radzen
@using Smart.Shared.DTOs.UserDTO
@using System.Net.Http.Headers
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService

<EditForm Model="@userLogin" OnValidSubmit="@HandleLogin">
    <div class="row">
        <div class="col-md-6 offset-md-3 col-lg-4 offset-lg-4">
            <section>
                <h2 class="text-center">Use a local account to log in.</h2>
                <hr />
                <div class="form-group">
                    <RadzenTextBox @bind-Value="userLogin.Email" Placeholder="name@example.com" class="form-control" />
                    <label>Email</label>
                </div>
                <div class="form-group">
                    <RadzenPassword @bind-Value="userLogin.Password" Placeholder="Password" class="form-control" />
                    <label>Password</label>
                </div>
                <div class="form-check mb-3">
                    <RadzenCheckBox @bind-Value="rememberMe" class="form-check-input" />
                    <label class="form-check-label">Remember me</label>
                </div>
                <div class="text-center">
                    <RadzenButton Text="Log in" ButtonType="ButtonType.Submit" Icon="login" class="btn btn-primary btn-block" />
                </div>
                <div class="text-center mt-3">
                    <RadzenLink Text="Forgot your password?" Path="/forgot-password" />
                </div>
                <div class="text-center">
                    <RadzenLink Text="Register as a new user" Path="/register" />
                </div>
                <div class="text-center">
                    <RadzenLink Text="Resend email confirmation" Path="/resend-email-confirmation" />
                </div>
            </section>
        </div>
    </div>
</EditForm>

@code {
    private UserLoginDTO userLogin = new UserLoginDTO();
    private bool rememberMe;

    [Parameter]
    public bool isAuthenticated { get; set; }

    private async Task HandleLogin()
    {
        var response = await HttpClient.PostAsJsonAsync("api/authentication/login", userLogin);
        if (response.IsSuccessStatusCode)
        {
            var tokens = await response.Content.ReadFromJsonAsync<UserAuthResponseDTO>();

            Console.WriteLine($"Login Token: {tokens.Token}");
            Console.WriteLine($"Login RefreshToken: {tokens.RefreshToken}");

            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", tokens.Token);
            if (rememberMe)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", tokens.RefreshToken);
            }

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokens.Token);

            isAuthenticated = true;

            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Login Successful", Detail = "You logged into your account." });
            await Task.Delay(500);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Login Failed", Detail = "Incorrect login or password" });
        }
    }
}