@page "/projects"
@using Smart.Shared.DTOs.ProjectDTO
@using System.Net.Http.Headers
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService

<div class="container-fluid">
    <div class="row justify-content-end">
        <div class="col-12 col-lg-3 end-100">
            <div class="add-button-container">
                <RadzenButton Text="Add Project" Icon="add" Style="background-color: #292731; color: silver;" Click="@AddButtonClick" />
            </div>
        </div>
    </div>
</div>
<RadzenContent Container="main">
    <RadzenHeading Size="H2" Text="Projects" Style="color:silver; text-align: center; margin-bottom: 2rem;" />

    <div class="filter-container">
        <RadzenButton Text="All" Click="@(() => FilterProjects(null))" Class="filter-btn" Style="background-color: #292731;" />
        <RadzenButton Text="Owned" Click="@(() => FilterProjects(true))" Class="filter-btn" Style="background-color: #292731;" />
        <RadzenButton Text="Member" Click="@(() => FilterProjects(false))" Class="filter-btn" Style="background-color: #292731;" />
    </div>

    <div class="search-container">
        <RadzenTextBox @bind-Value="@searchQuery" @oninput="UpdateSearchTerm" Placeholder="Search projects..." Style="width: 300px;" />
    </div>

    @if (!projectFound)
    {
        <div class="text-center d-flex justify-content-center">
            <RadzenText Text="Not Found"></RadzenText>
            <RadzenImage Path="/notproduct.png" Style="cursor: pointer; width: 300px; height: 300px; padding: 2px;" />
        </div>
    }
    else
    {
        <div class="project-grid">
            @if (filteredProjects != null)
            {
                int index = 0;
                @foreach (var project in filteredProjects)
                {
                    <div class="project-card @(index % 2 == 0 ? "card-background-1" : "card-background-2")" @onclick="@(() => NavigateToProjectPage(project.ProjectId))">
                        <h4 class="project-name">@project.Name</h4>
                    </div>
                    index++;
                }
            }
            else
            {
                <p class="loading-text">Loading projects...</p>
            }
        </div>
    }
</RadzenContent>

@code {
    private string searchQuery = "";
    private List<ProjectForUserDTO> filteredProjects = new List<ProjectForUserDTO>();
    private List<ProjectForUserDTO> allProjects = new List<ProjectForUserDTO>();
    private List<ProjectForUserDTO> ownedProjects = new List<ProjectForUserDTO>();
    private List<ProjectForUserDTO> memberProjects = new List<ProjectForUserDTO>();
    private bool projectFound = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ownedProjects = await HttpClient.GetFromJsonAsync<List<ProjectForUserDTO>>("api/project/owner") ?? new List<ProjectForUserDTO>();
            memberProjects = await HttpClient.GetFromJsonAsync<List<ProjectForUserDTO>>("api/project/member") ?? new List<ProjectForUserDTO>();
            allProjects = ownedProjects.Concat(memberProjects).ToList();
            filteredProjects = allProjects;
        }
        catch (Exception ex)
        {
            allProjects = new List<ProjectForUserDTO>();
            filteredProjects = allProjects;
        }
        projectFound = filteredProjects.Any();
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredProjects = allProjects;
        }
        else
        {
            filteredProjects = allProjects
                .Where(p => p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            p.ProjectId.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        projectFound = filteredProjects.Any();
    }

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        Search();
    }

    private void NavigateToProjectPage(int projectId)
    {
        NavigationManager.NavigateTo($"/project/{projectId}");
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<ProjectAdd>("Add Project", null);
        await OnInitializedAsync();
    }
    private void FilterProjects(bool? isOwned)
    {
        if (isOwned == null)
        {
            filteredProjects = allProjects;
        }
        else if (isOwned == true)
        {
            filteredProjects = ownedProjects;
        }
        else
        {
            filteredProjects = memberProjects;
        }
        searchQuery="";
    }
}
