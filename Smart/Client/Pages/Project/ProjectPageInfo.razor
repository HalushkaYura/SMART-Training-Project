@page "/project/{ProjectId:int}"
@using Smart.Client.Pages.Chat
@using Smart.Client.Pages.Task
@using Smart.Shared.DTOs.ProjectDTO
@using Smart.Shared.DTOs.TaskDTO
@using System.Net.Http.Headers
@using Smart.Shared.Helpers.Enums
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<RadzenContent Container="main">
    <div class="project-header">
        <div class="project-title-section">
            <RadzenHeading Size="H2" Text="@project.Name" @onclick="EditProjectName" />
            @if(project.IsOwner == true)
            {
                <div class="header-icons">
                    <span class="icon align-content-center" @onclick="OpenParticipantsDialog"> Members <RadzenIcon Icon="group" /></span>
                    <span class="icon" @onclick="ToggleProjectPrivacy">
                        @if (lockStatus)
                        {
                            <RadzenIcon Icon="lock_open" />
                        }
                        else
                        {
                            <RadzenIcon Icon="lock" />
                        }
                    </span>
                </div>
            }

            <div class="add-task">
                Create new task <span text="" class="create-icon" @onclick="OpenNewTaskDialog"><RadzenIcon Icon="add_circle_outline" /></span>
            </div>
        </div>
        @if (project.IsOwner == true)
        {
            <div class="project-actions-section">
                @if (!project.IsPublic)
                {
                    <span class="icon" @onclick="CopyProjectLink"><RadzenIcon Icon="link" /></span>
                }
                <span class="icon" @onclick="OpenAddParticipantDialog"><RadzenIcon Icon="person_add" /></span>
                <span class="delete-icon" @onclick="() => ShowConfirmDeleteAssignment(ProjectId)"><RadzenIcon Icon="delete" /></span>
            </div>
        }

    </div>
    <div class="task-board">
        @foreach (var status in Enum.GetValues(typeof(WorkItemStatus)).Cast<WorkItemStatus>())
        {
            <div class="task-column">
                <div class="column-header">
                    <RadzenHeading Size="H4" Text="@status.ToString()" />
                </div>
                <div class="task-list" data-status="@status">
                    @foreach (var task in tasks.Where(t => t.Status == status))
                    {
                        <div class="task-card @GetPriorityClass(task.Priority)" data-task-id="@task.WorkItemId">
                            <div class="task-header">
                                <div class="task-title">@task.Name</div>
                                <RadzenIcon Icon="edit" class="edit-icon" @onclick="@(async () => OpenEditTaskDialogPage(task.WorkItemId))" />
                            </div>
                            <div class="task-description"> @task.Description </div>
                            <div class="task-priority"> @task.Priority </div>
                            <input type="range" min="0" max="100" value="@task.Procent" @onchange="@(async (ChangeEventArgs e) => await UpdateTaskProgress(task.WorkItemId, int.Parse(e.Value.ToString())))" />
                            <div> @task.Procent %</div>
                            @if (task.Status == WorkItemStatus.OnHold)
                            {
                                <button @onclick="@(async () => await UpdateTaskStatus(task.WorkItemId, WorkItemStatus.Completed))">Complete</button>
                            }
                            else if (task.Status == WorkItemStatus.Completed)
                            {
                                <button @onclick="@(async () => await DeleteTask(task.WorkItemId))">Close</button>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <RadzenIcon Icon="chat" class="chat" Style="position: fixed; bottom: 20px; right: 20px; color:white " @onclick="OpenChatDialog" />
</RadzenContent>
@if (IsConfirmDeleteProjectOpen)
{
    <ConfirmDelete IsOpenDelete="true" 
        OnDeleteConfirmed="OnDeleteProjectConfirmed" />
}

@code {
    [Parameter]
    public int ProjectId { get; set; }
    private ProjectInfoDTO project = new ProjectInfoDTO();
    private List<WorkItemInfoDTO> tasks = new List<WorkItemInfoDTO>();
    private bool isEditingName = false;
    private string InviteLink { get; set; }
    private bool IsConfirmDeleteOpen { get; set; }
    private bool IsConfirmDeleteProjectOpen { get; set; }
    private bool IsConfirmChangeUserOpen { get; set; }
    private int projectIdToAction;
    private bool newTaskDialogOpen = false;
    private bool chatDialogOpen = false;
    private bool addParticipantDialogOpen = false;
    private bool participantsDialogOpen = false;
    private bool lockStatus = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectData();
    }

    private async Task OnDeleteProjectConfirmed(bool confirmed)
    {
        if (confirmed)
        {
            await HttpClient.DeleteAsync($"api/project/{ProjectId}");
            NavigationManager.NavigateTo("/projects");
        }
        IsConfirmDeleteProjectOpen = false;
    }

    private void ShowConfirmDeleteAssignment(int projectId)
    {
        projectIdToAction = projectId;
        IsConfirmDeleteProjectOpen = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadProjectData();
    }

    private async Task LoadProjectData()
    {
        project = await HttpClient.GetFromJsonAsync<ProjectInfoDTO>($"api/project/details/{ProjectId}");
        tasks = await HttpClient.GetFromJsonAsync<List<WorkItemInfoDTO>>($"api/workitem/project/{ProjectId}");
    }

    private void NavigateToTaskPage(int workItemId)
    {
        NavigationManager.NavigateTo($"/task/{workItemId}");
    }

    private async void OpenNewTaskDialog()
    {
        newTaskDialogOpen = true;
        DialogService.Open<WorkItemAdd>($"Add Task", new Dictionary<string, object> 
        {
            { "ProjectId", ProjectId },
            { "OnInitialized", EventCallback.Factory.Create<bool>(this, OnInitializedAsync) }
        });
    }

    private void OpenChatDialog()
    {
        chatDialogOpen = true;
        DialogService.Open<ChatDialog>($"Chat", new Dictionary<string, object> { { "ProjectId", ProjectId } });
    }

    private async Task OpenAddParticipantDialog()
    {
        addParticipantDialogOpen = true;
        DialogService.Open<AddParticipant>($"Add Participant", new Dictionary<string, object> { { "ProjectId", ProjectId } });
        await LoadProjectData();

    }

    private async Task OpenParticipantsDialog()
    {
        participantsDialogOpen = true;
        DialogService.Open<ViewParticipants>($"Participants", new Dictionary<string, object> { { "ProjectId", ProjectId } });
        await LoadProjectData();

    }

    private async Task ToggleProjectPrivacy()
    {
        lockStatus = !lockStatus;
        await HttpClient.PutAsJsonAsync($"api/project/{ProjectId}/toggle-privacy", project);
        await LoadProjectData();
    }

    private async Task SaveProjectName()
    {
        isEditingName = false;
        await HttpClient.PutAsJsonAsync<ProjectInfoDTO>($"api/project/{ProjectId}", project);
        await LoadProjectData();

    }

    private void EditProjectName()
    {
        isEditingName = true;
    }
    private void SetConfirmChangeUserOpen(bool isOpen)
    {
        IsConfirmChangeUserOpen = isOpen;
    }
    private async Task CopyProjectLink()
    {
        try
        {
            string inviteToken = Guid.NewGuid().ToString();
            ProjectEditDTO projectInvite = new ProjectEditDTO
                {
                    IsPublic = project.IsPublic,
                    Name = project.Name,
                    InviteToken = inviteToken
                };

            HttpResponseMessage response = await HttpClient.PutAsJsonAsync($"api/project/editProject/{ProjectId}", projectInvite);
            string inviteLink = await response.Content.ReadAsStringAsync();
            InviteLink = inviteLink; // Присвоюємо значення InviteLink
            await JSRuntime.InvokeVoidAsync("copyTextToClipboard", InviteLink);
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"Error copying text to clipboard: {jsEx.Message}");
        }
    }

    private async Task UpdateTaskProgress(int workItemId, int progress)
    {
        var updateProgressDto = new WorkItemUpdateProgressDTO { Progress = progress };
        await HttpClient.PutAsJsonAsync<WorkItemUpdateProgressDTO>($"api/workitem/update-progress/{workItemId}", updateProgressDto);
        var task = tasks.FirstOrDefault(t => t.WorkItemId == workItemId);
        if (task != null)
        {
            task.Procent = progress;
            // Update task status based on progress
            if (progress == 100)
            {
                await UpdateTaskStatus(workItemId, WorkItemStatus.OnHold);
            }
            else if (progress > 0 && progress < 100)
            {
                await UpdateTaskStatus(workItemId, WorkItemStatus.InProgress);
            }
            else
            {
                await UpdateTaskStatus(workItemId, WorkItemStatus.Open);
            }
        }
    }

    private async Task UpdateTaskStatus(int workItemId, WorkItemStatus newStatus)
    {
        var updateStatusDto = new WorkItemUpdateStatusDTO { Status = newStatus };
        await HttpClient.PutAsJsonAsync<WorkItemUpdateStatusDTO>($"api/workitem/update-status/{workItemId}", updateStatusDto);
        var task = tasks.FirstOrDefault(t => t.WorkItemId == workItemId);
        if (task != null)
        {
            task.Status = newStatus;
        }
    }

    private async Task DeleteTask(int workItemId)
    {
        await HttpClient.DeleteAsync($"api/workitem/{workItemId}");
        tasks.RemoveAll(t => t.WorkItemId == workItemId);
        await OnInitializedAsync();

    }

    private string GetPriorityClass(WorkItemPriority priority)
    {
        return priority switch
        {
            WorkItemPriority.Low => "priority-low",
            WorkItemPriority.Medium => "priority-medium",
            WorkItemPriority.High => "priority-high",
            _ => string.Empty,
        };
    }

    private async Task OpenEditTaskDialogPage(int workItemId)
    {
        newTaskDialogOpen = true;
        await DialogService.OpenAsync<WorkItemEdit>("Edit Task", new Dictionary<string, object>
        {
            { "WorkItemId", workItemId },
            { "OnInitialized", EventCallback.Factory.Create<bool>(this, OnInitializedAsync) }
        });
    }
}
