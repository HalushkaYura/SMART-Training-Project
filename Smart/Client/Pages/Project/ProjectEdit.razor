@page "/edit-project/{ProjectId:int}"
@using Smart.Shared.DTOs.ProjectDTO
@inject HttpClient Http
@inject NotificationService notificationService
@inject IJSRuntime JSRuntime
@inject DialogService dialogService

<PageTitle>Edit Project</PageTitle>

<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Project</RadzenAlert>
    <RadzenTemplateForm TItem="ProjectEditDTO" Data="@projectEdit" Visible="@(projectEdit != null)" Submit="@FormSubmit">

        <RadzenRow Style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" Style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox Style="display: block; width: 100%" @bind-Value="@projectEdit.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    protected bool errorVisible;
    protected ProjectEditDTO projectEdit;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ProjectInfoDTO projectInfo;
            projectInfo = await Http.GetFromJsonAsync<ProjectInfoDTO>($"api/project/info/{ProjectId}");
            projectEdit.IsPublic = projectInfo.IsPublic;
            projectEdit.Name = projectInfo.Name;
            projectEdit.InviteToken = projectInfo.InviteToken;

        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task FormSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/project/editProject/{ProjectId}", projectEdit);
            if (response.IsSuccessStatusCode)
            {
                dialogService.Close(projectEdit);
            }
            else
            {
                errorVisible = true;
            }
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        dialogService.Close(null);
    }
}
