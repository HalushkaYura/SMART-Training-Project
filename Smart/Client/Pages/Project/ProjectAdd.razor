@using Smart.Shared.DTOs.ProjectDTO
@inject HttpClient Http
@inject NotificationService notificationService
@inject IJSRuntime JSRuntime
@inject DialogService dialogService

<PageTitle>Add Project</PageTitle><RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Project</RadzenAlert>
    <RadzenTemplateForm TItem="ProjectCreateDTO" Data="@project" Visible="@(project != null)" Submit="@FormSubmit">

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@project.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Description" Component="Description" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@project.Description" Name="Description" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>
@code {
    protected override async Task OnInitializedAsync()
    {
        project = new ProjectCreateDTO();
    }

    protected bool errorVisible;
    protected ProjectCreateDTO project;

    protected async Task FormSubmit()
    {
        errorVisible = false;
        try
        {
            var response = await Http.PostAsJsonAsync("api/project/create", project);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ProjectIdDTO>();
                if (result != null && result.ProjectId > 0)
                {
                    dialogService.Close(result.ProjectId);
                }
                else
                {
                    errorVisible = true;
                }
            }
            else
            {
                errorVisible = true;
                var error = await response.Content.ReadAsStringAsync();
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = error });
            }
        }
        catch (Exception ex)
        {
            errorVisible = true;
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Exception", Detail = ex.Message });
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        dialogService.Close(null);
    }
}
