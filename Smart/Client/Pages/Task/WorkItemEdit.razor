@page "/editWorkItem/{WorkItemId:int}"
@using Smart.Shared.DTOs.ProjectDTO
@using Smart.Shared.Helpers.Enums
@using Smart.Shared.DTOs.TaskDTO
@inject NotificationService notificationService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject DialogService dialogService

<PageTitle>Edit Work Item</PageTitle>

<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Work Item</RadzenAlert>
    <RadzenTemplateForm TItem="WorkItemInfoDTO" Data="@WorkItem" Visible="@(WorkItem != null)" Submit="@FormSubmit">

        <RadzenRow Style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" Style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox Style="display: block; width: 100%" @bind-Value="WorkItem.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Description" Component="Description" Style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox Style="display: block; width: 100%" @bind-Value="WorkItem.Description" Name="Description" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="End Date" Component="EndDate" Style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDatePicker DateFormat="MM/dd/yyyy" Style="display: block; width: 100%" @bind-Value="WorkItem.EndDate" Name="EndDate" />
                <RadzenRequiredValidator Component="EndDate" Text="End Date is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Assigned User" Component="AssignedUserId" Style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDropDown Data="@Users" TextProperty="UserName" ValueProperty="UserId" @bind-Value="WorkItem.AssignedUserId" Name="AssignedUserId" Style="width: 100%" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    [Parameter]
    public int WorkItemId { get; set; }
    [Parameter] public EventCallback<bool> OnInitialized { get; set; }
    protected bool errorVisible;
    protected WorkItemInfoDTO WorkItem { get; set; }
    protected List<ProjectMemberDTO> Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            WorkItem = await HttpClient.GetFromJsonAsync<WorkItemInfoDTO>($"api/workitem/{WorkItemId}");
            var project = await HttpClient.GetFromJsonAsync<ProjectDetailsDTO>($"api/project/details/{WorkItem.ProjectId}");
            Users = project?.Members ?? new List<ProjectMemberDTO>();
        }
        catch (Exception)
        {
            errorVisible = true;
        }
    }

    protected async Task FormSubmit()
    {
        try
        {
            await HttpClient.PutAsJsonAsync($"api/workitem/edit/{WorkItemId}", WorkItem);
            await OnInitialized.InvokeAsync(true);
            dialogService.Close(WorkItem);

        }
        catch (Exception)
        {
            errorVisible = true;
        }
    }

    protected void CancelButtonClick(MouseEventArgs args)
    {
        dialogService.Close(null);
    }
}
