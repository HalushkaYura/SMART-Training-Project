@page "/add-work-item/{projectId:int}/{parentTaskId:int?}"
@using Smart.Shared.DTOs.ProjectDTO
@using Smart.Shared.Helpers.Enums
@using Smart.Shared.DTOs.TaskDTO

@inject NotificationService notificationService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject DialogService dialogService

<PageTitle>Add Work Item</PageTitle>

<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Work Item</RadzenAlert>
    <RadzenTemplateForm TItem="WorkItemCreateDTO" Data="@workItem" Visible="@(workItem != null)" Submit="@FormSubmit">
        <RadzenRow Style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Project" Component="ProjectId" Style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDropDown Data="@projects" TextProperty="Name" ValueProperty="ProjectId" AllowClear=true
                                Placeholder="Choose Project" Style="display: block; width: 100%" @bind-Value="@workItem.ProjectId" Name="ProjectId" Disabled="true" />
                <RadzenRequiredValidator Component="ProjectId" Text="Project is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@workItem.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Description" Component="Description" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@workItem.Description" Name="Description" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Status" Component="Status" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDropDown Data="@(Enum.GetValues(typeof(WorkItemStatus)).Cast<WorkItemStatus>())" TextProperty="Name" ValueProperty="Value" AllowClear=true
                                Placeholder="Choose Status" style="display: block; width: 100%" @bind-Value="@workItem.Status" Name="Status" />
                <RadzenRequiredValidator Component="Status" Text="Status is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Priority" Component="Priority" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDropDown Data="@(Enum.GetValues(typeof(WorkItemPriority)).Cast<WorkItemPriority>())" TextProperty="Name" ValueProperty="Value" AllowClear=true
                                Placeholder="Choose Priority" style="display: block; width: 100%" @bind-Value="@workItem.Priority" Name="Priority" />
                <RadzenRequiredValidator Component="Priority" Text="Priority is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Start Date" Component="StartDate" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDatePicker DateFormat="MM/dd/yyyy" style="display: block; width: 100%" @bind-Value="@workItem.StartDate" Name="StartDate" />
                <RadzenRequiredValidator Component="StartDate" Text="Start Date is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="End Date" Component="EndDate" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDatePicker DateFormat="MM/dd/yyyy" style="display: block; width: 100%" @bind-Value="@workItem.EndDate" Name="EndDate" />
                <RadzenRequiredValidator Component="EndDate" Text="End Date is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Assigned User" Component="AssignedUserId" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@workItem.AssignedUserId" Name="AssignedUserId" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Created By" Component="CreatedByUserId" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@workItem.CreatedByUserId" Name="CreatedByUserId" Disabled="true" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int? ParentTaskId { get; set; }

    protected bool errorVisible;
    protected WorkItemCreateDTO workItem;
    protected IEnumerable<ProjectInfoDTO> projects;
    protected IEnumerable<ProjectDetailsDTO> users;

    protected override async Task OnInitializedAsync()
    {
        workItem = new WorkItemCreateDTO
            {
                ProjectId = ProjectId,
                ParentTaskId = ParentTaskId,
            };

        projects = await HttpClient.GetFromJsonAsync<List<ProjectInfoDTO>>($"api/project/info/{ProjectId}");
        users = await HttpClient.GetFromJsonAsync<List<ProjectDetailsDTO>>($"api/project/details/{ProjectId}");
    }

    protected async Task FormSubmit()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/workitem/createWorkItem", workItem);
            if (response.IsSuccessStatusCode)
            {
                dialogService.Close(workItem);
            }
            else
            {
                errorVisible = true;
            }
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        dialogService.Close(null);
    }

}
