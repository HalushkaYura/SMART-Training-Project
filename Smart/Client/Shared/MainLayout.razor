@using Newtonsoft.Json
@using Radzen
@using Smart.Shared.DTOs.UserDTO
@using Smart.Shared.DTOs.UserDTO
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject TooltipService TooltipService 
@inject ContextMenuService ContextMenuService 
@inject NotificationService NotificationService 
@inject HttpClient HttpClient

<RadzenComponents />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">

    <RadzenHeader Style="background-color:white; color:black">
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
            <RadzenColumn Size="5">
                <div class="d-flex justify-content-start align-items-start">
                    <RadzenSidebarToggle Click="@SidebarToggleClick" Style="color:black"></RadzenSidebarToggle>
                    @if (isAuthenticated && userInfo != null)
                    {
                        <RadzenText Style="font-size: large; margin-top: 10px; color: black;">
                            Hello @userInfo.Firstname
                        </RadzenText>
                    }

                </div>
            </RadzenColumn>
            <RadzenColumn Size="7">

                    <div class="d-flex justify-content-end align-items-center">

                                <RadzenButton Text="Login" Icon="login" Style="color:whitesmoke; margin-right: 10px; background-color: dimgrey" Click="@(e => NavigationManager.NavigateTo("/Identity/Account/Login", true))" />
                                <RadzenButton Text="Register" Icon="person_add" Style="color:whitesmoke; margin-right: 10px; background-color: dimgrey " Click="@(e => NavigationManager.NavigateTo("/Identity/Account/Register", true))" />
                    </div>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>

    <RadzenBody Expanded="@sidebarExpanded">
        <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
            <RadzenColumn Size="12">
                @Body
            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>

    <RadzenSidebar Responsive="false " Style="width: max-content; border:none; background : #292731">

        <RadzenStack AlignItems="Radzen.AlignItems.Center" class="rz-py-4 rz-py-lg-6" >
            <RadzenRow AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.Start ">
                <RadzenImage Path="/logo.png" style="width: 38px; height: 38px; margin-left: 10px; margin-right: 10px;" Click="@(e => NavigationManager.NavigateTo("/"))"></RadzenImage>
                <RadzenText Text="SMART  " TextStyle="Radzen.Blazor.TextStyle.Subtitle2" style="@(sidebarExpanded ? "color: white; margin-bottom: 0px; padding-right: 10px; font-size: 20px;" : "display: none; ")" />
            </RadzenRow>
        </RadzenStack>


        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText  : MenuItemDisplayStyle.Icon)" ShowArrow="true" Style="background-color: #292731; border:none">
            <RadzenPanelMenuItem Text="Faculties" Icon="account_balance" Style="color:antiquewhite" Click="@(e => NavigationManager.NavigateTo("faculty"))" />
            <RadzenPanelMenuItem Text="Students" Icon="assignment_ind" Style="color:antiquewhite" Click="@(e => NavigationManager.NavigateTo("student"))" />
            <RadzenPanelMenuItem Text="Groups" Style="color:antiquewhite" Icon="dns" Click="@(e => NavigationManager.NavigateTo("groups"))" />
        </RadzenPanelMenu>
    </RadzenSidebar>
</RadzenLayout>

@code {
    private bool sidebarExpanded = true;
    private bool isAuthenticated;
    private UserInfoDTO userInfo;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await GetAuthenticationStatus();
        if (isAuthenticated)
        {
            // Отримайте інформацію про користувача
            userInfo = await GetUserInfo();
        }
    }


    private async Task<bool> GetAuthenticationStatus()
    {
        var response = await HttpClient.GetAsync("api/auth/IsAuthenticated");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return bool.TryParse(content, out bool isAuthenticated) && isAuthenticated;
        }
        else
        {
            // Обробка помилок
            return false;
        }
    }
    private async Task<UserInfoDTO> GetUserInfo()
    {
        var response = await HttpClient.GetAsync("api/user/currentUser");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();

            return JsonConvert.DeserializeObject<UserInfoDTO>(content);
        }
        else
        {
            return null;
        }
    }
    void SidebarToggleClick()
    {
        sidebarExpanded = !sidebarExpanded;

    }
}
