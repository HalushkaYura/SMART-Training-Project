@inherits LayoutComponentBase
@using Newtonsoft.Json
@using Radzen
@using Smart.Shared.DTOs.UserDTO
@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject HttpClient HttpClient

<RadzenComponents />

<RadzenLayout class = "background-image">
    @if (isLoading)
    {
        <RadzenBody>
           <LoadingPage />
        </RadzenBody>
    }
    else
    {
        <RadzenHeader Style="background-color:white; color:black">
            <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
                <RadzenColumn Size="5">
                    <div class="d-flex justify-content-start align-items-start">
                        <RadzenSidebarToggle Click="@(async (args) => SidebarToggleClick())" Style="color:black"></RadzenSidebarToggle>
                        @if (isAuthenticated )
                        {
                            <RadzenText Style="font-size: large; margin-top: 10px; color: black;">
                                Hello @userInfo.Firstname @userInfo.Lastname !
                            </RadzenText>
                        }
                    </div>
                </RadzenColumn>
                <RadzenColumn Size="7">
                    <div class="d-flex justify-content-end align-items-center">
                        @if (!isAuthenticated || userInfo == null)
                        {
                            <RadzenButton Text="Login" Icon="login" Style="color:whitesmoke; margin-right: 10px; background-color: dimgrey" Click="@(args => NavigationManager.NavigateTo("/Login"))" />
                            <RadzenButton Text="Register" Icon="person_add" Style="color:whitesmoke; margin-right: 10px; background-color: dimgrey" Click="@(args => NavigationManager.NavigateTo("/Register"))" />
                        }
                        else
                        {
                            <RadzenButton Text="Logout" Icon="logout" Style="color:whitesmoke; margin-right: 10px; background-color: dimgrey" Click="@Logout" />
                        }
                    </div>
                </RadzenColumn>
            </RadzenRow>
        </RadzenHeader>

        <RadzenBody Expanded="@sidebarExpanded">
            <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
                <RadzenColumn Size="12">
                    @Body
                </RadzenColumn>
            </RadzenRow>
        </RadzenBody>

        <RadzenSidebar Responsive="false" Style="width: max-content; border:none; background : #292731">
            <RadzenStack AlignItems="Radzen.AlignItems.Center" class="rz-py-4 rz-py-lg-6" @onclick="NavigateToHome">
                <RadzenRow AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.Start">
                    <RadzenImage Path="/logo.png" Style="width: 38px; height: 38px; margin-left: 10px; margin-right: 5px;"></RadzenImage>
                    <RadzenText Text="SMART" TextStyle="Radzen.Blazor.TextStyle.Subtitle2" Style="@(sidebarExpanded ? "color: white; margin-bottom: 0px; padding-right: 10px; font-size: 20px;" : "display: none;")"></RadzenText>
                </RadzenRow>
            </RadzenStack>

            <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="true" Style="background-color: #292731; border:none">
            </RadzenPanelMenu>
        </RadzenSidebar>
    }
</RadzenLayout>

@code {
    private bool sidebarExpanded = true;
    private bool isLoading = true;
    [Parameter]
    public bool isAuthenticated { get; set; }
    private UserChangeInfoDTO userInfo;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await GetAuthenticationStatus();
        if (isAuthenticated)
        {
            userInfo = await GetUserInfo();
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task<bool> GetAuthenticationStatus()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            return false;
        }

        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await HttpClient.GetAsync("api/auth/IsAuthenticated");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return bool.TryParse(content, out bool isAuthenticated) && isAuthenticated;
        }
        else
        {
            return false;
        }
    }

    private async Task<UserChangeInfoDTO> GetUserInfo()
    {
        var response = await HttpClient.GetAsync("api/user/info");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var user = JsonConvert.DeserializeObject<UserChangeInfoDTO>(content);

            return user ?? baseUser;
        }
        else
        {
            return baseUser;
        }
    }

    private UserChangeInfoDTO baseUser = new UserChangeInfoDTO
        {
            Email = "unknown@test.com",
            Firstname = "Unknown",
            Lastname = "Test",
            BirthDate = DateTime.UtcNow,
        };

    private void SidebarToggleClick()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "refreshToken");

        HttpClient.DefaultRequestHeaders.Authorization = null;

        isAuthenticated = false;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Logout Successful",
                Detail = "You have logged out of your account."
            });

        NavigationManager.NavigateTo("/");
    }
    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
